#BlueJ class context
comment0.params=
comment0.target=Ponto()
comment0.text=\n\ Construtor\ por\ omiss\u00E3o\ de\ Ponto.\n
comment1.params=cx\ cy
comment1.target=Ponto(int,\ int)
comment1.text=\n\ Construtor\ parametrizado\ de\ Ponto.\n\ Aceita\ como\ par\u00E2metros\ os\ valores\ para\ cada\ coordenada.\n
comment10.params=
comment10.target=boolean\ ePositivo()
comment10.text=\n\ M\u00E9todo\ que\ determina\ se\ o\ ponto\ est\u00E1\ no\ quadrante\ positivo\ de\ x\ e\ y\n\ @return\ booleano\ que\ \u00E9\ verdadeiro\ se\ x>0\ e\ y>0\n
comment11.params=umPonto
comment11.target=double\ distancia(Ponto)
comment11.text=\n\ M\u00E9todo\ que\ determina\ a\ dist\u00E2ncia\ de\ um\ Ponto\ a\ outro.\n\ @param\ umPonto\ ponto\ ao\ qual\ se\ quer\ determinar\ a\ dist\u00E2ncia\n\ @return\ double\ com\ o\ valor\ da\ dist\u00E2ncia\n
comment12.params=umPonto
comment12.target=boolean\ iguais(Ponto)
comment12.text=\n\ M\u00E9todo\ que\ determina\ se\ dois\ pontos\ s\u00E3o\ iguais.\n\ @return\ booleano\ que\ \u00E9\ verdadeiro\ se\ os\ valores\ das\ duas\ \n\ coordenadas\ forem\ iguais\n
comment13.params=
comment13.target=boolean\ xIgualAy()
comment13.text=\n\ M\u00E9todo\ que\ determina\ se\ o\ m\u00F3dulo\ das\ duas\ coordenadas\ \u00E9\ o\ mesmo.\n\ @return\ true,\ se\ as\ coordenadas\ em\ x\ e\ y\ \n\ forem\ iguais\ em\ valor\ absoluto.\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=\n\ M\u00E9todo\ que\ devolve\ a\ representa\u00E7\u00E3o\ em\ String\ do\ Ponto.\n\ @return\ String\ com\ as\ coordenadas\ x\ e\ y\n
comment15.params=o
comment15.target=boolean\ equals(java.lang.Object)
comment16.params=
comment16.target=Ponto\ clone()
comment16.text=\n\ M\u00E9todo\ que\ faz\ uma\ c\u00F3pia\ do\ objecto\ receptor\ da\ mensagem.\n\ Para\ tal\ invoca\ o\ construtor\ de\ c\u00F3pia.\n\ \n\ @return\ objecto\ clone\ do\ objecto\ que\ recebe\ a\ mensagem.\n
comment2.params=umPonto
comment2.target=Ponto(Ponto)
comment2.text=\n\ Construtor\ de\ c\u00F3pia\ de\ Ponto.\n\ Aceita\ como\ par\u00E2metro\ outro\ Ponto\ e\ utiliza\ os\ m\u00E9todos\n\ de\ acesso\ aos\ valores\ das\ vari\u00E1veis\ de\ inst\u00E2ncia.\n
comment3.params=
comment3.target=int\ getX()
comment3.text=\n\ Devolve\ o\ valor\ da\ coordenada\ em\ x.\n\ \n\ @return\ valor\ da\ coordenada\ x.\n
comment4.params=
comment4.target=int\ getY()
comment4.text=\n\ Devolve\ o\ valor\ da\ coordenada\ em\ y.\n\ \n\ @return\ valor\ da\ coordenada\ y.\n
comment5.params=novoX
comment5.target=void\ setX(int)
comment5.text=\n\ Actualiza\ o\ valor\ da\ coordenada\ em\ x.\n\ \n\ @param\ novoX\ novo\ valor\ da\ coordenada\ em\ X\n
comment6.params=novoY
comment6.target=void\ setY(int)
comment6.text=\n\ Actualiza\ o\ valor\ da\ coordenada\ em\ y.\n\ \n\ @param\ novoY\ novo\ valor\ da\ coordenada\ em\ Y\n
comment7.params=deltaX\ deltaY
comment7.target=void\ deslocamento(int,\ int)
comment7.text=\n\ M\u00E9todo\ que\ desloca\ um\ ponto\ somando\ um\ delta\ \u00E0s\ coordenadas\n\ em\ x\ e\ y.\n\ \n\ @param\ deltaX\ valor\ de\ deslocamento\ do\ x\n\ @param\ deltaY\ valor\ de\ deslocamento\ do\ y\n
comment8.params=umPonto
comment8.target=void\ somaPonto(Ponto)
comment8.text=\n\ M\u00E9todo\ que\ soma\ as\ componentes\ do\ Ponto\ passado\ como\ par\u00E2metro.\n\ @param\ umPonto\ ponto\ que\ \u00E9\ somado\ ao\ ponto\ receptor\ da\ mensagem.\n
comment9.params=cx\ cy
comment9.target=void\ movePonto(int,\ int)
comment9.text=\n\ M\u00E9todo\ que\ move\ o\ Ponto\ para\ novas\ coordenadas.\n\ @param\ novoX\ novo\ valor\ de\ x.\n\ @param\ novoY\ novo\ valor\ de\ y.\n
numComments=17
