Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Aplicacao
Rule 1     Aplicacao -> Declaracoes Content
Rule 2     Content -> function Instrucoes end
Rule 3     Declaracoes -> Declaracao . Declaracoes
Rule 4     Declaracoes -> <empty>
Rule 5     Declaracao -> int var
Rule 6     Declaracao -> int var [ num ]
Rule 7     Declaracao -> int var [ num ] [ num ]
Rule 8     Declaracao -> int var = num
Rule 9     Declaracao -> int var [ num ] = { Array }
Rule 10    Declaracao -> int var [ num ] [ num ] = { DoubleArray }
Rule 11    DoubleArray -> { Array } ElemsDArray
Rule 12    ElemsDArray -> , { Array } ElemsDArray
Rule 13    ElemsDArray -> <empty>
Rule 14    Array -> num Elems
Rule 15    Elems -> , num Elems
Rule 16    Elems -> <empty>
Rule 17    Instrucoes -> Instrucao . Instrucoes
Rule 18    Instrucoes -> <empty>
Rule 19    Instrucao -> Loop
Rule 20    Instrucao -> Condition
Rule 21    Instrucao -> Print
Rule 22    Instrucao -> var = read
Rule 23    Instrucao -> var [ num ] = Expressao
Rule 24    Instrucao -> var [ num ] [ num ] = Expressao
Rule 25    Instrucao -> var = Expressao
Rule 26    Instrucao -> var inc
Rule 27    Instrucao -> var dec
Rule 28    Loop -> repeat { Instrucoes } until Verifica
Rule 29    Condition -> if Verifica { Instrucoes }
Rule 30    Condition -> if Verifica { Instrucoes } else { Instrucoes }
Rule 31    Verifica -> ( Cond )
Rule 32    Verifica -> ! ( Cond )
Rule 33    Verifica -> Verifica and Verifica
Rule 34    Verifica -> Verifica or Verifica
Rule 35    Cond -> Expressao equals Expressao
Rule 36    Cond -> Expressao lessEq Expressao
Rule 37    Cond -> Expressao moreEq Expressao
Rule 38    Cond -> Expressao < Expressao
Rule 39    Cond -> Expressao > Expressao
Rule 40    Cond -> Verifica
Rule 41    Print -> print var
Rule 42    Print -> print string
Rule 43    Expressao -> Expressao + Termo
Rule 44    Expressao -> Expressao - Termo
Rule 45    Expressao -> Termo
Rule 46    Termo -> Termo * Fator
Rule 47    Termo -> Termo / Fator
Rule 48    Termo -> Fator
Rule 49    Fator -> var [ num ]
Rule 50    Fator -> var [ num ] [ num ]
Rule 51    Fator -> var
Rule 52    Fator -> num
Rule 53    Fator -> ( Expressao )

Terminals, with rules where they appear

!                    : 32
(                    : 31 32 53
)                    : 31 32 53
*                    : 46
+                    : 43
,                    : 12 15
-                    : 44
.                    : 3 17
/                    : 47
<                    : 38
=                    : 8 9 10 22 23 24 25
>                    : 39
[                    : 6 7 7 9 10 10 23 24 24 49 50 50
]                    : 6 7 7 9 10 10 23 24 24 49 50 50
and                  : 33
dec                  : 27
else                 : 30
end                  : 2
equals               : 35
error                : 
function             : 2
if                   : 29 30
inc                  : 26
int                  : 5 6 7 8 9 10
lessEq               : 36
moreEq               : 37
num                  : 6 7 7 8 9 10 10 14 15 23 24 24 49 50 50 52
or                   : 34
print                : 41 42
read                 : 22
repeat               : 28
string               : 42
until                : 28
var                  : 5 6 7 8 9 10 22 23 24 25 26 27 41 49 50 51
{                    : 9 10 11 12 28 29 30 30
}                    : 9 10 11 12 28 29 30 30

Nonterminals, with rules where they appear

Aplicacao            : 0
Array                : 9 11 12
Cond                 : 31 32
Condition            : 20
Content              : 1
Declaracao           : 3
Declaracoes          : 1 3
DoubleArray          : 10
Elems                : 14 15
ElemsDArray          : 11 12
Expressao            : 23 24 25 35 35 36 36 37 37 38 38 39 39 43 44 53
Fator                : 46 47 48
Instrucao            : 17
Instrucoes           : 2 17 28 29 30 30
Loop                 : 19
Print                : 21
Termo                : 43 44 45 46 47
Verifica             : 28 29 30 33 33 34 34 40

Parsing method: LALR

state 0

    (0) S' -> . Aplicacao
    (1) Aplicacao -> . Declaracoes Content
    (3) Declaracoes -> . Declaracao . Declaracoes
    (4) Declaracoes -> .
    (5) Declaracao -> . int var
    (6) Declaracao -> . int var [ num ]
    (7) Declaracao -> . int var [ num ] [ num ]
    (8) Declaracao -> . int var = num
    (9) Declaracao -> . int var [ num ] = { Array }
    (10) Declaracao -> . int var [ num ] [ num ] = { DoubleArray }

    function        reduce using rule 4 (Declaracoes -> .)
    int             shift and go to state 4

    Aplicacao                      shift and go to state 1
    Declaracoes                    shift and go to state 2
    Declaracao                     shift and go to state 3

state 1

    (0) S' -> Aplicacao .



state 2

    (1) Aplicacao -> Declaracoes . Content
    (2) Content -> . function Instrucoes end

    function        shift and go to state 6

    Content                        shift and go to state 5

state 3

    (3) Declaracoes -> Declaracao . . Declaracoes

    .               shift and go to state 7


state 4

    (5) Declaracao -> int . var
    (6) Declaracao -> int . var [ num ]
    (7) Declaracao -> int . var [ num ] [ num ]
    (8) Declaracao -> int . var = num
    (9) Declaracao -> int . var [ num ] = { Array }
    (10) Declaracao -> int . var [ num ] [ num ] = { DoubleArray }

    var             shift and go to state 8


state 5

    (1) Aplicacao -> Declaracoes Content .

    $end            reduce using rule 1 (Aplicacao -> Declaracoes Content .)


state 6

    (2) Content -> function . Instrucoes end
    (17) Instrucoes -> . Instrucao . Instrucoes
    (18) Instrucoes -> .
    (19) Instrucao -> . Loop
    (20) Instrucao -> . Condition
    (21) Instrucao -> . Print
    (22) Instrucao -> . var = read
    (23) Instrucao -> . var [ num ] = Expressao
    (24) Instrucao -> . var [ num ] [ num ] = Expressao
    (25) Instrucao -> . var = Expressao
    (26) Instrucao -> . var inc
    (27) Instrucao -> . var dec
    (28) Loop -> . repeat { Instrucoes } until Verifica
    (29) Condition -> . if Verifica { Instrucoes }
    (30) Condition -> . if Verifica { Instrucoes } else { Instrucoes }
    (41) Print -> . print var
    (42) Print -> . print string

    end             reduce using rule 18 (Instrucoes -> .)
    var             shift and go to state 14
    repeat          shift and go to state 15
    if              shift and go to state 16
    print           shift and go to state 17

    Instrucoes                     shift and go to state 9
    Instrucao                      shift and go to state 10
    Loop                           shift and go to state 11
    Condition                      shift and go to state 12
    Print                          shift and go to state 13

state 7

    (3) Declaracoes -> Declaracao . . Declaracoes
    (3) Declaracoes -> . Declaracao . Declaracoes
    (4) Declaracoes -> .
    (5) Declaracao -> . int var
    (6) Declaracao -> . int var [ num ]
    (7) Declaracao -> . int var [ num ] [ num ]
    (8) Declaracao -> . int var = num
    (9) Declaracao -> . int var [ num ] = { Array }
    (10) Declaracao -> . int var [ num ] [ num ] = { DoubleArray }

    function        reduce using rule 4 (Declaracoes -> .)
    int             shift and go to state 4

    Declaracao                     shift and go to state 3
    Declaracoes                    shift and go to state 18

state 8

    (5) Declaracao -> int var .
    (6) Declaracao -> int var . [ num ]
    (7) Declaracao -> int var . [ num ] [ num ]
    (8) Declaracao -> int var . = num
    (9) Declaracao -> int var . [ num ] = { Array }
    (10) Declaracao -> int var . [ num ] [ num ] = { DoubleArray }

    .               reduce using rule 5 (Declaracao -> int var .)
    [               shift and go to state 19
    =               shift and go to state 20


state 9

    (2) Content -> function Instrucoes . end

    end             shift and go to state 21


state 10

    (17) Instrucoes -> Instrucao . . Instrucoes

    .               shift and go to state 22


state 11

    (19) Instrucao -> Loop .

    .               reduce using rule 19 (Instrucao -> Loop .)


state 12

    (20) Instrucao -> Condition .

    .               reduce using rule 20 (Instrucao -> Condition .)


state 13

    (21) Instrucao -> Print .

    .               reduce using rule 21 (Instrucao -> Print .)


state 14

    (22) Instrucao -> var . = read
    (23) Instrucao -> var . [ num ] = Expressao
    (24) Instrucao -> var . [ num ] [ num ] = Expressao
    (25) Instrucao -> var . = Expressao
    (26) Instrucao -> var . inc
    (27) Instrucao -> var . dec

    =               shift and go to state 23
    [               shift and go to state 24
    inc             shift and go to state 25
    dec             shift and go to state 26


state 15

    (28) Loop -> repeat . { Instrucoes } until Verifica

    {               shift and go to state 27


state 16

    (29) Condition -> if . Verifica { Instrucoes }
    (30) Condition -> if . Verifica { Instrucoes } else { Instrucoes }
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica

    (               shift and go to state 29
    !               shift and go to state 30

    Verifica                       shift and go to state 28

state 17

    (41) Print -> print . var
    (42) Print -> print . string

    var             shift and go to state 31
    string          shift and go to state 32


state 18

    (3) Declaracoes -> Declaracao . Declaracoes .

    function        reduce using rule 3 (Declaracoes -> Declaracao . Declaracoes .)


state 19

    (6) Declaracao -> int var [ . num ]
    (7) Declaracao -> int var [ . num ] [ num ]
    (9) Declaracao -> int var [ . num ] = { Array }
    (10) Declaracao -> int var [ . num ] [ num ] = { DoubleArray }

    num             shift and go to state 33


state 20

    (8) Declaracao -> int var = . num

    num             shift and go to state 34


state 21

    (2) Content -> function Instrucoes end .

    $end            reduce using rule 2 (Content -> function Instrucoes end .)


state 22

    (17) Instrucoes -> Instrucao . . Instrucoes
    (17) Instrucoes -> . Instrucao . Instrucoes
    (18) Instrucoes -> .
    (19) Instrucao -> . Loop
    (20) Instrucao -> . Condition
    (21) Instrucao -> . Print
    (22) Instrucao -> . var = read
    (23) Instrucao -> . var [ num ] = Expressao
    (24) Instrucao -> . var [ num ] [ num ] = Expressao
    (25) Instrucao -> . var = Expressao
    (26) Instrucao -> . var inc
    (27) Instrucao -> . var dec
    (28) Loop -> . repeat { Instrucoes } until Verifica
    (29) Condition -> . if Verifica { Instrucoes }
    (30) Condition -> . if Verifica { Instrucoes } else { Instrucoes }
    (41) Print -> . print var
    (42) Print -> . print string

    end             reduce using rule 18 (Instrucoes -> .)
    }               reduce using rule 18 (Instrucoes -> .)
    var             shift and go to state 14
    repeat          shift and go to state 15
    if              shift and go to state 16
    print           shift and go to state 17

    Instrucao                      shift and go to state 10
    Instrucoes                     shift and go to state 35
    Loop                           shift and go to state 11
    Condition                      shift and go to state 12
    Print                          shift and go to state 13

state 23

    (22) Instrucao -> var = . read
    (25) Instrucao -> var = . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    read            shift and go to state 37
    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 38
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 24

    (23) Instrucao -> var [ . num ] = Expressao
    (24) Instrucao -> var [ . num ] [ num ] = Expressao

    num             shift and go to state 43


state 25

    (26) Instrucao -> var inc .

    .               reduce using rule 26 (Instrucao -> var inc .)


state 26

    (27) Instrucao -> var dec .

    .               reduce using rule 27 (Instrucao -> var dec .)


state 27

    (28) Loop -> repeat { . Instrucoes } until Verifica
    (17) Instrucoes -> . Instrucao . Instrucoes
    (18) Instrucoes -> .
    (19) Instrucao -> . Loop
    (20) Instrucao -> . Condition
    (21) Instrucao -> . Print
    (22) Instrucao -> . var = read
    (23) Instrucao -> . var [ num ] = Expressao
    (24) Instrucao -> . var [ num ] [ num ] = Expressao
    (25) Instrucao -> . var = Expressao
    (26) Instrucao -> . var inc
    (27) Instrucao -> . var dec
    (28) Loop -> . repeat { Instrucoes } until Verifica
    (29) Condition -> . if Verifica { Instrucoes }
    (30) Condition -> . if Verifica { Instrucoes } else { Instrucoes }
    (41) Print -> . print var
    (42) Print -> . print string

    }               reduce using rule 18 (Instrucoes -> .)
    var             shift and go to state 14
    repeat          shift and go to state 15
    if              shift and go to state 16
    print           shift and go to state 17

    Instrucoes                     shift and go to state 44
    Instrucao                      shift and go to state 10
    Loop                           shift and go to state 11
    Condition                      shift and go to state 12
    Print                          shift and go to state 13

state 28

    (29) Condition -> if Verifica . { Instrucoes }
    (30) Condition -> if Verifica . { Instrucoes } else { Instrucoes }
    (33) Verifica -> Verifica . and Verifica
    (34) Verifica -> Verifica . or Verifica

    {               shift and go to state 45
    and             shift and go to state 46
    or              shift and go to state 47


state 29

    (31) Verifica -> ( . Cond )
    (35) Cond -> . Expressao equals Expressao
    (36) Cond -> . Expressao lessEq Expressao
    (37) Cond -> . Expressao moreEq Expressao
    (38) Cond -> . Expressao < Expressao
    (39) Cond -> . Expressao > Expressao
    (40) Cond -> . Verifica
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    (               shift and go to state 48
    !               shift and go to state 30
    var             shift and go to state 36
    num             shift and go to state 41

    Cond                           shift and go to state 49
    Expressao                      shift and go to state 50
    Verifica                       shift and go to state 51
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 30

    (32) Verifica -> ! . ( Cond )

    (               shift and go to state 52


state 31

    (41) Print -> print var .

    .               reduce using rule 41 (Print -> print var .)


state 32

    (42) Print -> print string .

    .               reduce using rule 42 (Print -> print string .)


state 33

    (6) Declaracao -> int var [ num . ]
    (7) Declaracao -> int var [ num . ] [ num ]
    (9) Declaracao -> int var [ num . ] = { Array }
    (10) Declaracao -> int var [ num . ] [ num ] = { DoubleArray }

    ]               shift and go to state 53


state 34

    (8) Declaracao -> int var = num .

    .               reduce using rule 8 (Declaracao -> int var = num .)


state 35

    (17) Instrucoes -> Instrucao . Instrucoes .

    end             reduce using rule 17 (Instrucoes -> Instrucao . Instrucoes .)
    }               reduce using rule 17 (Instrucoes -> Instrucao . Instrucoes .)


state 36

    (49) Fator -> var . [ num ]
    (50) Fator -> var . [ num ] [ num ]
    (51) Fator -> var .

    [               shift and go to state 54
    *               reduce using rule 51 (Fator -> var .)
    /               reduce using rule 51 (Fator -> var .)
    +               reduce using rule 51 (Fator -> var .)
    -               reduce using rule 51 (Fator -> var .)
    .               reduce using rule 51 (Fator -> var .)
    equals          reduce using rule 51 (Fator -> var .)
    lessEq          reduce using rule 51 (Fator -> var .)
    moreEq          reduce using rule 51 (Fator -> var .)
    <               reduce using rule 51 (Fator -> var .)
    >               reduce using rule 51 (Fator -> var .)
    )               reduce using rule 51 (Fator -> var .)


state 37

    (22) Instrucao -> var = read .

    .               reduce using rule 22 (Instrucao -> var = read .)


state 38

    (25) Instrucao -> var = Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    .               reduce using rule 25 (Instrucao -> var = Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 39

    (45) Expressao -> Termo .
    (46) Termo -> Termo . * Fator
    (47) Termo -> Termo . / Fator

    +               reduce using rule 45 (Expressao -> Termo .)
    -               reduce using rule 45 (Expressao -> Termo .)
    .               reduce using rule 45 (Expressao -> Termo .)
    equals          reduce using rule 45 (Expressao -> Termo .)
    lessEq          reduce using rule 45 (Expressao -> Termo .)
    moreEq          reduce using rule 45 (Expressao -> Termo .)
    <               reduce using rule 45 (Expressao -> Termo .)
    >               reduce using rule 45 (Expressao -> Termo .)
    )               reduce using rule 45 (Expressao -> Termo .)
    *               shift and go to state 57
    /               shift and go to state 58


state 40

    (48) Termo -> Fator .

    *               reduce using rule 48 (Termo -> Fator .)
    /               reduce using rule 48 (Termo -> Fator .)
    +               reduce using rule 48 (Termo -> Fator .)
    -               reduce using rule 48 (Termo -> Fator .)
    .               reduce using rule 48 (Termo -> Fator .)
    equals          reduce using rule 48 (Termo -> Fator .)
    lessEq          reduce using rule 48 (Termo -> Fator .)
    moreEq          reduce using rule 48 (Termo -> Fator .)
    <               reduce using rule 48 (Termo -> Fator .)
    >               reduce using rule 48 (Termo -> Fator .)
    )               reduce using rule 48 (Termo -> Fator .)


state 41

    (52) Fator -> num .

    *               reduce using rule 52 (Fator -> num .)
    /               reduce using rule 52 (Fator -> num .)
    +               reduce using rule 52 (Fator -> num .)
    -               reduce using rule 52 (Fator -> num .)
    .               reduce using rule 52 (Fator -> num .)
    equals          reduce using rule 52 (Fator -> num .)
    lessEq          reduce using rule 52 (Fator -> num .)
    moreEq          reduce using rule 52 (Fator -> num .)
    <               reduce using rule 52 (Fator -> num .)
    >               reduce using rule 52 (Fator -> num .)
    )               reduce using rule 52 (Fator -> num .)


state 42

    (53) Fator -> ( . Expressao )
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 59
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 43

    (23) Instrucao -> var [ num . ] = Expressao
    (24) Instrucao -> var [ num . ] [ num ] = Expressao

    ]               shift and go to state 60


state 44

    (28) Loop -> repeat { Instrucoes . } until Verifica

    }               shift and go to state 61


state 45

    (29) Condition -> if Verifica { . Instrucoes }
    (30) Condition -> if Verifica { . Instrucoes } else { Instrucoes }
    (17) Instrucoes -> . Instrucao . Instrucoes
    (18) Instrucoes -> .
    (19) Instrucao -> . Loop
    (20) Instrucao -> . Condition
    (21) Instrucao -> . Print
    (22) Instrucao -> . var = read
    (23) Instrucao -> . var [ num ] = Expressao
    (24) Instrucao -> . var [ num ] [ num ] = Expressao
    (25) Instrucao -> . var = Expressao
    (26) Instrucao -> . var inc
    (27) Instrucao -> . var dec
    (28) Loop -> . repeat { Instrucoes } until Verifica
    (29) Condition -> . if Verifica { Instrucoes }
    (30) Condition -> . if Verifica { Instrucoes } else { Instrucoes }
    (41) Print -> . print var
    (42) Print -> . print string

    }               reduce using rule 18 (Instrucoes -> .)
    var             shift and go to state 14
    repeat          shift and go to state 15
    if              shift and go to state 16
    print           shift and go to state 17

    Instrucoes                     shift and go to state 62
    Instrucao                      shift and go to state 10
    Loop                           shift and go to state 11
    Condition                      shift and go to state 12
    Print                          shift and go to state 13

state 46

    (33) Verifica -> Verifica and . Verifica
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica

    (               shift and go to state 29
    !               shift and go to state 30

    Verifica                       shift and go to state 63

state 47

    (34) Verifica -> Verifica or . Verifica
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica

    (               shift and go to state 29
    !               shift and go to state 30

    Verifica                       shift and go to state 64

state 48

    (31) Verifica -> ( . Cond )
    (53) Fator -> ( . Expressao )
    (35) Cond -> . Expressao equals Expressao
    (36) Cond -> . Expressao lessEq Expressao
    (37) Cond -> . Expressao moreEq Expressao
    (38) Cond -> . Expressao < Expressao
    (39) Cond -> . Expressao > Expressao
    (40) Cond -> . Verifica
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    (               shift and go to state 48
    !               shift and go to state 30
    var             shift and go to state 36
    num             shift and go to state 41

    Cond                           shift and go to state 49
    Expressao                      shift and go to state 65
    Verifica                       shift and go to state 51
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 49

    (31) Verifica -> ( Cond . )

    )               shift and go to state 66


state 50

    (35) Cond -> Expressao . equals Expressao
    (36) Cond -> Expressao . lessEq Expressao
    (37) Cond -> Expressao . moreEq Expressao
    (38) Cond -> Expressao . < Expressao
    (39) Cond -> Expressao . > Expressao
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    equals          shift and go to state 67
    lessEq          shift and go to state 68
    moreEq          shift and go to state 69
    <               shift and go to state 70
    >               shift and go to state 71
    +               shift and go to state 55
    -               shift and go to state 56


state 51

    (40) Cond -> Verifica .
    (33) Verifica -> Verifica . and Verifica
    (34) Verifica -> Verifica . or Verifica

    )               reduce using rule 40 (Cond -> Verifica .)
    and             shift and go to state 46
    or              shift and go to state 47


state 52

    (32) Verifica -> ! ( . Cond )
    (35) Cond -> . Expressao equals Expressao
    (36) Cond -> . Expressao lessEq Expressao
    (37) Cond -> . Expressao moreEq Expressao
    (38) Cond -> . Expressao < Expressao
    (39) Cond -> . Expressao > Expressao
    (40) Cond -> . Verifica
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    (               shift and go to state 48
    !               shift and go to state 30
    var             shift and go to state 36
    num             shift and go to state 41

    Cond                           shift and go to state 72
    Expressao                      shift and go to state 50
    Verifica                       shift and go to state 51
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 53

    (6) Declaracao -> int var [ num ] .
    (7) Declaracao -> int var [ num ] . [ num ]
    (9) Declaracao -> int var [ num ] . = { Array }
    (10) Declaracao -> int var [ num ] . [ num ] = { DoubleArray }

    .               reduce using rule 6 (Declaracao -> int var [ num ] .)
    [               shift and go to state 73
    =               shift and go to state 74


state 54

    (49) Fator -> var [ . num ]
    (50) Fator -> var [ . num ] [ num ]

    num             shift and go to state 75


state 55

    (43) Expressao -> Expressao + . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Termo                          shift and go to state 76
    Fator                          shift and go to state 40

state 56

    (44) Expressao -> Expressao - . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Termo                          shift and go to state 77
    Fator                          shift and go to state 40

state 57

    (46) Termo -> Termo * . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Fator                          shift and go to state 78

state 58

    (47) Termo -> Termo / . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Fator                          shift and go to state 79

state 59

    (53) Fator -> ( Expressao . )
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               shift and go to state 80
    +               shift and go to state 55
    -               shift and go to state 56


state 60

    (23) Instrucao -> var [ num ] . = Expressao
    (24) Instrucao -> var [ num ] . [ num ] = Expressao

    =               shift and go to state 82
    [               shift and go to state 81


state 61

    (28) Loop -> repeat { Instrucoes } . until Verifica

    until           shift and go to state 83


state 62

    (29) Condition -> if Verifica { Instrucoes . }
    (30) Condition -> if Verifica { Instrucoes . } else { Instrucoes }

    }               shift and go to state 84


state 63

    (33) Verifica -> Verifica and Verifica .
    (33) Verifica -> Verifica . and Verifica
    (34) Verifica -> Verifica . or Verifica

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    {               reduce using rule 33 (Verifica -> Verifica and Verifica .)
    )               reduce using rule 33 (Verifica -> Verifica and Verifica .)
    .               reduce using rule 33 (Verifica -> Verifica and Verifica .)
    and             shift and go to state 46
    or              shift and go to state 47

  ! and             [ reduce using rule 33 (Verifica -> Verifica and Verifica .) ]
  ! or              [ reduce using rule 33 (Verifica -> Verifica and Verifica .) ]


state 64

    (34) Verifica -> Verifica or Verifica .
    (33) Verifica -> Verifica . and Verifica
    (34) Verifica -> Verifica . or Verifica

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    {               reduce using rule 34 (Verifica -> Verifica or Verifica .)
    )               reduce using rule 34 (Verifica -> Verifica or Verifica .)
    .               reduce using rule 34 (Verifica -> Verifica or Verifica .)
    and             shift and go to state 46
    or              shift and go to state 47

  ! and             [ reduce using rule 34 (Verifica -> Verifica or Verifica .) ]
  ! or              [ reduce using rule 34 (Verifica -> Verifica or Verifica .) ]


state 65

    (53) Fator -> ( Expressao . )
    (35) Cond -> Expressao . equals Expressao
    (36) Cond -> Expressao . lessEq Expressao
    (37) Cond -> Expressao . moreEq Expressao
    (38) Cond -> Expressao . < Expressao
    (39) Cond -> Expressao . > Expressao
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               shift and go to state 80
    equals          shift and go to state 67
    lessEq          shift and go to state 68
    moreEq          shift and go to state 69
    <               shift and go to state 70
    >               shift and go to state 71
    +               shift and go to state 55
    -               shift and go to state 56


state 66

    (31) Verifica -> ( Cond ) .

    {               reduce using rule 31 (Verifica -> ( Cond ) .)
    and             reduce using rule 31 (Verifica -> ( Cond ) .)
    or              reduce using rule 31 (Verifica -> ( Cond ) .)
    )               reduce using rule 31 (Verifica -> ( Cond ) .)
    .               reduce using rule 31 (Verifica -> ( Cond ) .)


state 67

    (35) Cond -> Expressao equals . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 85
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 68

    (36) Cond -> Expressao lessEq . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 86
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 69

    (37) Cond -> Expressao moreEq . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 87
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 70

    (38) Cond -> Expressao < . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 88
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 71

    (39) Cond -> Expressao > . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 89
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 72

    (32) Verifica -> ! ( Cond . )

    )               shift and go to state 90


state 73

    (7) Declaracao -> int var [ num ] [ . num ]
    (10) Declaracao -> int var [ num ] [ . num ] = { DoubleArray }

    num             shift and go to state 91


state 74

    (9) Declaracao -> int var [ num ] = . { Array }

    {               shift and go to state 92


state 75

    (49) Fator -> var [ num . ]
    (50) Fator -> var [ num . ] [ num ]

    ]               shift and go to state 93


state 76

    (43) Expressao -> Expressao + Termo .
    (46) Termo -> Termo . * Fator
    (47) Termo -> Termo . / Fator

    +               reduce using rule 43 (Expressao -> Expressao + Termo .)
    -               reduce using rule 43 (Expressao -> Expressao + Termo .)
    .               reduce using rule 43 (Expressao -> Expressao + Termo .)
    equals          reduce using rule 43 (Expressao -> Expressao + Termo .)
    lessEq          reduce using rule 43 (Expressao -> Expressao + Termo .)
    moreEq          reduce using rule 43 (Expressao -> Expressao + Termo .)
    <               reduce using rule 43 (Expressao -> Expressao + Termo .)
    >               reduce using rule 43 (Expressao -> Expressao + Termo .)
    )               reduce using rule 43 (Expressao -> Expressao + Termo .)
    *               shift and go to state 57
    /               shift and go to state 58


state 77

    (44) Expressao -> Expressao - Termo .
    (46) Termo -> Termo . * Fator
    (47) Termo -> Termo . / Fator

    +               reduce using rule 44 (Expressao -> Expressao - Termo .)
    -               reduce using rule 44 (Expressao -> Expressao - Termo .)
    .               reduce using rule 44 (Expressao -> Expressao - Termo .)
    equals          reduce using rule 44 (Expressao -> Expressao - Termo .)
    lessEq          reduce using rule 44 (Expressao -> Expressao - Termo .)
    moreEq          reduce using rule 44 (Expressao -> Expressao - Termo .)
    <               reduce using rule 44 (Expressao -> Expressao - Termo .)
    >               reduce using rule 44 (Expressao -> Expressao - Termo .)
    )               reduce using rule 44 (Expressao -> Expressao - Termo .)
    *               shift and go to state 57
    /               shift and go to state 58


state 78

    (46) Termo -> Termo * Fator .

    *               reduce using rule 46 (Termo -> Termo * Fator .)
    /               reduce using rule 46 (Termo -> Termo * Fator .)
    +               reduce using rule 46 (Termo -> Termo * Fator .)
    -               reduce using rule 46 (Termo -> Termo * Fator .)
    .               reduce using rule 46 (Termo -> Termo * Fator .)
    equals          reduce using rule 46 (Termo -> Termo * Fator .)
    lessEq          reduce using rule 46 (Termo -> Termo * Fator .)
    moreEq          reduce using rule 46 (Termo -> Termo * Fator .)
    <               reduce using rule 46 (Termo -> Termo * Fator .)
    >               reduce using rule 46 (Termo -> Termo * Fator .)
    )               reduce using rule 46 (Termo -> Termo * Fator .)


state 79

    (47) Termo -> Termo / Fator .

    *               reduce using rule 47 (Termo -> Termo / Fator .)
    /               reduce using rule 47 (Termo -> Termo / Fator .)
    +               reduce using rule 47 (Termo -> Termo / Fator .)
    -               reduce using rule 47 (Termo -> Termo / Fator .)
    .               reduce using rule 47 (Termo -> Termo / Fator .)
    equals          reduce using rule 47 (Termo -> Termo / Fator .)
    lessEq          reduce using rule 47 (Termo -> Termo / Fator .)
    moreEq          reduce using rule 47 (Termo -> Termo / Fator .)
    <               reduce using rule 47 (Termo -> Termo / Fator .)
    >               reduce using rule 47 (Termo -> Termo / Fator .)
    )               reduce using rule 47 (Termo -> Termo / Fator .)


state 80

    (53) Fator -> ( Expressao ) .

    *               reduce using rule 53 (Fator -> ( Expressao ) .)
    /               reduce using rule 53 (Fator -> ( Expressao ) .)
    +               reduce using rule 53 (Fator -> ( Expressao ) .)
    -               reduce using rule 53 (Fator -> ( Expressao ) .)
    .               reduce using rule 53 (Fator -> ( Expressao ) .)
    equals          reduce using rule 53 (Fator -> ( Expressao ) .)
    lessEq          reduce using rule 53 (Fator -> ( Expressao ) .)
    moreEq          reduce using rule 53 (Fator -> ( Expressao ) .)
    <               reduce using rule 53 (Fator -> ( Expressao ) .)
    >               reduce using rule 53 (Fator -> ( Expressao ) .)
    )               reduce using rule 53 (Fator -> ( Expressao ) .)


state 81

    (24) Instrucao -> var [ num ] [ . num ] = Expressao

    num             shift and go to state 94


state 82

    (23) Instrucao -> var [ num ] = . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 95
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 83

    (28) Loop -> repeat { Instrucoes } until . Verifica
    (31) Verifica -> . ( Cond )
    (32) Verifica -> . ! ( Cond )
    (33) Verifica -> . Verifica and Verifica
    (34) Verifica -> . Verifica or Verifica

    (               shift and go to state 29
    !               shift and go to state 30

    Verifica                       shift and go to state 96

state 84

    (29) Condition -> if Verifica { Instrucoes } .
    (30) Condition -> if Verifica { Instrucoes } . else { Instrucoes }

    .               reduce using rule 29 (Condition -> if Verifica { Instrucoes } .)
    else            shift and go to state 97


state 85

    (35) Cond -> Expressao equals Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               reduce using rule 35 (Cond -> Expressao equals Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 86

    (36) Cond -> Expressao lessEq Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               reduce using rule 36 (Cond -> Expressao lessEq Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 87

    (37) Cond -> Expressao moreEq Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               reduce using rule 37 (Cond -> Expressao moreEq Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 88

    (38) Cond -> Expressao < Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               reduce using rule 38 (Cond -> Expressao < Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 89

    (39) Cond -> Expressao > Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    )               reduce using rule 39 (Cond -> Expressao > Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 90

    (32) Verifica -> ! ( Cond ) .

    {               reduce using rule 32 (Verifica -> ! ( Cond ) .)
    and             reduce using rule 32 (Verifica -> ! ( Cond ) .)
    or              reduce using rule 32 (Verifica -> ! ( Cond ) .)
    )               reduce using rule 32 (Verifica -> ! ( Cond ) .)
    .               reduce using rule 32 (Verifica -> ! ( Cond ) .)


state 91

    (7) Declaracao -> int var [ num ] [ num . ]
    (10) Declaracao -> int var [ num ] [ num . ] = { DoubleArray }

    ]               shift and go to state 98


state 92

    (9) Declaracao -> int var [ num ] = { . Array }
    (14) Array -> . num Elems

    num             shift and go to state 99

    Array                          shift and go to state 100

state 93

    (49) Fator -> var [ num ] .
    (50) Fator -> var [ num ] . [ num ]

    *               reduce using rule 49 (Fator -> var [ num ] .)
    /               reduce using rule 49 (Fator -> var [ num ] .)
    +               reduce using rule 49 (Fator -> var [ num ] .)
    -               reduce using rule 49 (Fator -> var [ num ] .)
    .               reduce using rule 49 (Fator -> var [ num ] .)
    equals          reduce using rule 49 (Fator -> var [ num ] .)
    lessEq          reduce using rule 49 (Fator -> var [ num ] .)
    moreEq          reduce using rule 49 (Fator -> var [ num ] .)
    <               reduce using rule 49 (Fator -> var [ num ] .)
    >               reduce using rule 49 (Fator -> var [ num ] .)
    )               reduce using rule 49 (Fator -> var [ num ] .)
    [               shift and go to state 101


state 94

    (24) Instrucao -> var [ num ] [ num . ] = Expressao

    ]               shift and go to state 102


state 95

    (23) Instrucao -> var [ num ] = Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    .               reduce using rule 23 (Instrucao -> var [ num ] = Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 96

    (28) Loop -> repeat { Instrucoes } until Verifica .
    (33) Verifica -> Verifica . and Verifica
    (34) Verifica -> Verifica . or Verifica

    .               reduce using rule 28 (Loop -> repeat { Instrucoes } until Verifica .)
    and             shift and go to state 46
    or              shift and go to state 47


state 97

    (30) Condition -> if Verifica { Instrucoes } else . { Instrucoes }

    {               shift and go to state 103


state 98

    (7) Declaracao -> int var [ num ] [ num ] .
    (10) Declaracao -> int var [ num ] [ num ] . = { DoubleArray }

    .               reduce using rule 7 (Declaracao -> int var [ num ] [ num ] .)
    =               shift and go to state 104


state 99

    (14) Array -> num . Elems
    (15) Elems -> . , num Elems
    (16) Elems -> .

    ,               shift and go to state 106
    }               reduce using rule 16 (Elems -> .)

    Elems                          shift and go to state 105

state 100

    (9) Declaracao -> int var [ num ] = { Array . }

    }               shift and go to state 107


state 101

    (50) Fator -> var [ num ] [ . num ]

    num             shift and go to state 108


state 102

    (24) Instrucao -> var [ num ] [ num ] . = Expressao

    =               shift and go to state 109


state 103

    (30) Condition -> if Verifica { Instrucoes } else { . Instrucoes }
    (17) Instrucoes -> . Instrucao . Instrucoes
    (18) Instrucoes -> .
    (19) Instrucao -> . Loop
    (20) Instrucao -> . Condition
    (21) Instrucao -> . Print
    (22) Instrucao -> . var = read
    (23) Instrucao -> . var [ num ] = Expressao
    (24) Instrucao -> . var [ num ] [ num ] = Expressao
    (25) Instrucao -> . var = Expressao
    (26) Instrucao -> . var inc
    (27) Instrucao -> . var dec
    (28) Loop -> . repeat { Instrucoes } until Verifica
    (29) Condition -> . if Verifica { Instrucoes }
    (30) Condition -> . if Verifica { Instrucoes } else { Instrucoes }
    (41) Print -> . print var
    (42) Print -> . print string

    }               reduce using rule 18 (Instrucoes -> .)
    var             shift and go to state 14
    repeat          shift and go to state 15
    if              shift and go to state 16
    print           shift and go to state 17

    Instrucoes                     shift and go to state 110
    Instrucao                      shift and go to state 10
    Loop                           shift and go to state 11
    Condition                      shift and go to state 12
    Print                          shift and go to state 13

state 104

    (10) Declaracao -> int var [ num ] [ num ] = . { DoubleArray }

    {               shift and go to state 111


state 105

    (14) Array -> num Elems .

    }               reduce using rule 14 (Array -> num Elems .)


state 106

    (15) Elems -> , . num Elems

    num             shift and go to state 112


state 107

    (9) Declaracao -> int var [ num ] = { Array } .

    .               reduce using rule 9 (Declaracao -> int var [ num ] = { Array } .)


state 108

    (50) Fator -> var [ num ] [ num . ]

    ]               shift and go to state 113


state 109

    (24) Instrucao -> var [ num ] [ num ] = . Expressao
    (43) Expressao -> . Expressao + Termo
    (44) Expressao -> . Expressao - Termo
    (45) Expressao -> . Termo
    (46) Termo -> . Termo * Fator
    (47) Termo -> . Termo / Fator
    (48) Termo -> . Fator
    (49) Fator -> . var [ num ]
    (50) Fator -> . var [ num ] [ num ]
    (51) Fator -> . var
    (52) Fator -> . num
    (53) Fator -> . ( Expressao )

    var             shift and go to state 36
    num             shift and go to state 41
    (               shift and go to state 42

    Expressao                      shift and go to state 114
    Termo                          shift and go to state 39
    Fator                          shift and go to state 40

state 110

    (30) Condition -> if Verifica { Instrucoes } else { Instrucoes . }

    }               shift and go to state 115


state 111

    (10) Declaracao -> int var [ num ] [ num ] = { . DoubleArray }
    (11) DoubleArray -> . { Array } ElemsDArray

    {               shift and go to state 116

    DoubleArray                    shift and go to state 117

state 112

    (15) Elems -> , num . Elems
    (15) Elems -> . , num Elems
    (16) Elems -> .

    ,               shift and go to state 106
    }               reduce using rule 16 (Elems -> .)

    Elems                          shift and go to state 118

state 113

    (50) Fator -> var [ num ] [ num ] .

    *               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    /               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    +               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    -               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    .               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    equals          reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    lessEq          reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    moreEq          reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    <               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    >               reduce using rule 50 (Fator -> var [ num ] [ num ] .)
    )               reduce using rule 50 (Fator -> var [ num ] [ num ] .)


state 114

    (24) Instrucao -> var [ num ] [ num ] = Expressao .
    (43) Expressao -> Expressao . + Termo
    (44) Expressao -> Expressao . - Termo

    .               reduce using rule 24 (Instrucao -> var [ num ] [ num ] = Expressao .)
    +               shift and go to state 55
    -               shift and go to state 56


state 115

    (30) Condition -> if Verifica { Instrucoes } else { Instrucoes } .

    .               reduce using rule 30 (Condition -> if Verifica { Instrucoes } else { Instrucoes } .)


state 116

    (11) DoubleArray -> { . Array } ElemsDArray
    (14) Array -> . num Elems

    num             shift and go to state 99

    Array                          shift and go to state 119

state 117

    (10) Declaracao -> int var [ num ] [ num ] = { DoubleArray . }

    }               shift and go to state 120


state 118

    (15) Elems -> , num Elems .

    }               reduce using rule 15 (Elems -> , num Elems .)


state 119

    (11) DoubleArray -> { Array . } ElemsDArray

    }               shift and go to state 121


state 120

    (10) Declaracao -> int var [ num ] [ num ] = { DoubleArray } .

    .               reduce using rule 10 (Declaracao -> int var [ num ] [ num ] = { DoubleArray } .)


state 121

    (11) DoubleArray -> { Array } . ElemsDArray
    (12) ElemsDArray -> . , { Array } ElemsDArray
    (13) ElemsDArray -> .

    ,               shift and go to state 123
    }               reduce using rule 13 (ElemsDArray -> .)

    ElemsDArray                    shift and go to state 122

state 122

    (11) DoubleArray -> { Array } ElemsDArray .

    }               reduce using rule 11 (DoubleArray -> { Array } ElemsDArray .)


state 123

    (12) ElemsDArray -> , . { Array } ElemsDArray

    {               shift and go to state 124


state 124

    (12) ElemsDArray -> , { . Array } ElemsDArray
    (14) Array -> . num Elems

    num             shift and go to state 99

    Array                          shift and go to state 125

state 125

    (12) ElemsDArray -> , { Array . } ElemsDArray

    }               shift and go to state 126


state 126

    (12) ElemsDArray -> , { Array } . ElemsDArray
    (12) ElemsDArray -> . , { Array } ElemsDArray
    (13) ElemsDArray -> .

    ,               shift and go to state 123
    }               reduce using rule 13 (ElemsDArray -> .)

    ElemsDArray                    shift and go to state 127

state 127

    (12) ElemsDArray -> , { Array } ElemsDArray .

    }               reduce using rule 12 (ElemsDArray -> , { Array } ElemsDArray .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 63 resolved as shift
WARNING: shift/reduce conflict for or in state 63 resolved as shift
WARNING: shift/reduce conflict for and in state 64 resolved as shift
WARNING: shift/reduce conflict for or in state 64 resolved as shift
